{
	"sample_databases": [
		{
			"db_id": "toys",
			"column_names_original": [[0, "toy_id"], [0, "age_group"], [0, "rating"], [0, "remarks"], [0, "sold_by"], [1, "vendor_id"], [1, "vendor_name"], [1, "nr_employees"]],
			"table_names_original": ["toys", "vendors"],
			"files": ["toys.csv", "vendors.csv"]
		}
	],
	"transform": {
		"from_*": {
			"to_python": {
				"template": "\"\"\\nThis Python program transforms the files of the following database into anotehr format<strategy>.\n<database>\n<plan>\"\"\"\n\n--- Start of Python program ---",
				"marker": "--- End of Python program ---",
				"linepre": ""
			},
			"to_bash": {
				"template": "# This Bash script transforms the files of the following database into another format<strategy>.\n<database>\n<plan>\n\n--- Start of Bash script ---\n#!/bin/bash\n\necho \"Transforming data ...\"",
				"marker": "--- End of Bash script ---",
				"linepre": "# "
			},
			"to_cpp": {
				"template": "// This C++ program transforms the files of the following database into another format<strategy>.\n<database>\n<plan>\n\n--- Start of C++ program ---\n",
				"marker": "--- End of C++ program ---",
				"linepre": "// "
			}
		},
		"tactics": [
			"Import libraries<strategy>.",
			"Iterate over all tables.",
			"For each table, load the associated file.",
			"Transform the file into another format<strategy>.",
			"Write new file to hard disk.",
			"Delete in-memory data structures."],
		"precedence": [
			{"F":0, "S":3},
			{"F":1, "S":3},
			{"F":2, "S":3},
			{"F":3, "S":4},
			{"F":4, "S":5}
		],
		"strategies": [
			"", 
			" for efficient processing", 
			" for higher space efficiency", 
			" for easy parallelization"]
	},
	"index": {
		"from_*": {
			"to_python": {
				"template": "\"\"\\nThis Python program indexes the files of the following database<strategy>.\n<database>\n<plan>\"\"\"\n\n--- Start of Python program ---",
				"marker": "--- End of Python program ---",
				"linepre": ""
			},
			"to_bash": {
				"template": "# This Bash script indexes the files of the following database<strategy>.\n<database>\n<plan>\n\n--- Start of Bash script ---\n#!/bin/bash\n\necho \"Transforming data ...\"",
				"marker": "--- End of Bash script ---",
				"linepre": "# "
			},
			"to_cpp": {
				"template": "// This C++ program indexes the files of the following database<strategy>.\n<database>\n<plan>\n\n--- Start of C++ program ---\n",
				"marker": "--- End of C++ program ---",
				"linepre": "// "
			}
		},
		"tactics": [
			"Iterate over all tables in the database. For each table:",
			"Load data from hard disk.",
			"Index the data <strategy>.",
			"Write indexed data to disk.",
			"Remove in-memory data structures."
		],
		"precedence": [
			{"F":0, "S":3},
			{"F":3, "S":4},
			{"F":1, "S":2},
			{"F":2, "S":3}
		],
		"strategies": [
			"",
			"using B+ tree indexes",
			"using hash indexes"
		]
	},
	"query": {
		"from_nl": {
			"sample_tasks": [
				{"task": "How many toys?", "db_id": 0}
			],
			"to_python": {
				"template": "\"\"\"\nThis Python program answers the query \"<task>\" on the following tables:\n<database>\n<plan>\n\"\"\"\n\n--- Start of Python program ---",
				"marker": "--- End of Python program ---",
				"linepre": "",
				"sample_solutions": ["\nimport pandas as pd\n\ntoys=pd.read_csv(\"toys.csv\")\nprint(toys.shape[0])\n--- End of Python program ---"]
			},
			"to_bash": {
				"template": "# This Bash script answers the query \"<task>\" on the following tables:\n<database>\n# Answer the query \"<task>\":\n<plan>\n\n--- Start of Bash script ---\n#!/bin/bash\n\necho \"Processing query ...\"",
				"marker": "--- End of Bash script ---",
				"linepre": "# ",
				"sample_solutions": ["\ntail +2 toys.csv | wc -l\n--- End of Bash script ---"]
			},
			"to_cpp": {
				"template": "// This C++ program answers the query \"<task>\" on the following tables:\n<database>\n<plan>\n\n--- Start of C++ program ---\n",
				"marker": "--- End of C++ program ---",
				"linepre": "// ",
				"sample_solutions": ["\n#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <vector>\nusing namespace std;\n\nstruct s_toys {\n\tstring toy_id;\n\tstring age_group;\n\tdouble rating;\n\tstring remarks;\n\tstring sold_by;\n};\n\nint main()\n{\n\tifstream toys_file(\"toys.csv\");\n\ttoys_file.ignore(5000, '\\n');\n\n\tvector<s_toys> toys_vector;\n\tstring line, field;\n\twhile (getline(toys_file, line)) {\n\t\tstringstream ss(line);\n\t\tstruct s_toys toys;\n\t\tgetline(ss, field, ',');\n\t\ttoys.toy_id=field;\n\n\t\tgetline(ss, field, ',');\n\t\ttoys.age_group=field;\n\n\t\tgetline(ss, field, ',');\n\t\ttoys.rating=stod(field);\n\n\t\tgetline(ss, field, ',');\ntoys.remarks=field;\n\n\t\ttoys_vector.push_back(toys);\n\t}\n\n\tcout << toys_vector.size() << endl;\n}\n\n--- End of C++ program ---"]
			},
			"to_pg_sql": {
				"template": "##### Translate this query into SQL: <task>\n<database>\n--- Start of SQL query ---\nSELECT ",
				"marker": "--- End of SQL query ---",
				"linepre": "# ",
				"sample_solutions": ["\nselect count(*) from toys;\n--- End of SQL query ---"]
			}
		},
		"from_pg_sql": {
			"to_python": {
				"template": "\"\"\"\nThis Python program answers the SQL query \"<task>\" on the following tables:\n<database>\n<plan>\n\"\"\"\n\n--- Start of Python program ---",
				"marker": "--- End of Python program ---",
				"linepre": ""
			},
			"to_bash": {
				"template": "# This Bash script answers the SQL query \"<task>\" on the following tables:\n<database>\n# Answer the query \"<task>\":\n<plan>\n\n--- Start of Bash script ---\n#!/bin/bash\n\necho \"Processing query ...\"",
				"marker": "--- End of Bash script ---",
				"linepre": "# "
			},
			"to_cpp": {
				"template": "// This C++ program answers the SQL query \"<task>\" on the following tables:\n<database>\n<plan>\n\n--- Start of C++ program ---\n",
				"marker": "--- End of C++ program ---",
				"linepre": "// "
			}
		},
		"tactics": [
			"Import libraries<strategy>.",
			"Load data for all relevant tables.",
			"Sort data<strategy>.",
			"Hash data<strategy>.",
			"Calculate the answer to the query.",
			"Enable display for all rows and columns, strings of infinite length.",
			"Print out query result only."
		],
		"precedence": [
			{"F":0, "S":4},
			{"F":5, "S":6},
			{"F":1, "S":2},
			{"F":1, "S":3},
			{"F":1, "S":4},
			{"F":4, "S":6}
		],
		"strategies": [
			"", 
			" for parallel processing", 
			" for GPU processing",
			" for efficient processing"]
	}
}