'''
Created on Sep 21, 2021

@author: immanueltrummer
'''
from io import StringIO
from contextlib import redirect_stdout

class PythonExec():
    """ Executes automatically generated Python code. """
    
    def __init__(self, spider_dir):
        """ Initializes code generation.
        
        Args:
            spider_dir: path to spider benchmark
        """
        self.spider_dir = spider_dir
    
    def get_answer(self, db_id, prompt, generated):
        """ Execute code to generate query answer.
        
        Args:
            db_id: database identifier
            prompt: code prompt for generation
            generated: code generated by Codex
        
        Returns:
            answer generated by executing code
        """
        pruned = self._prune_code(generated)
        all_code = prompt + pruned
        print(f'Executing \n{all_code}\n---')
        data_path = f'{self.spider_dir}/database/{db_id}/'
        all_code = all_code.replace(
            "pd.read_csv('", f"pd.read_csv('{data_path}")
        
        f = StringIO()
        with redirect_stdout(f):
            exec(all_code)
        return f.getvalue()
    
    def _prune_code(self, generated):
        """ Prune generated code. 
        
        Args:
            generated: code generated by Codex
        
        Returns:
            code parts that likely answer query
        """
        gen_lines = generated.split('\n')
        gen_lines = [g for g in gen_lines if g]
        gen_lines.pop()
        
        pruned = []
        for line in gen_lines:
            if not line.startswith('print('):
                break
            else:
                pruned.append(line)
        
        return '\n'.join(pruned)